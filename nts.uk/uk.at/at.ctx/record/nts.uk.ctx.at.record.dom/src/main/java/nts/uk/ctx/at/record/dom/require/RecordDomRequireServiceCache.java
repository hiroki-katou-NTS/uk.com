package nts.uk.ctx.at.record.dom.require;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.lang3.tuple.Pair;

import lombok.Getter;
import lombok.Setter;
import nts.arc.time.calendar.period.DatePeriod;
import nts.uk.ctx.at.record.dom.adapter.employment.EmploymentHistImport;
import nts.uk.ctx.at.record.dom.dailyperformanceprocessing.creationprocess.CreatingDailyResultsCondition;
import nts.uk.ctx.at.record.dom.monthlyclosureupdatelog.MonthlyClosureUpdateErrorInfor;
import nts.uk.ctx.at.record.dom.monthlyclosureupdatelog.MonthlyClosureUpdateLog;
import nts.uk.ctx.at.record.dom.monthlyclosureupdatelog.MonthlyClosureUpdatePersonLog;
import nts.uk.ctx.at.record.dom.organization.EmploymentHistoryImported;
import nts.uk.ctx.at.record.dom.stamp.card.stampcard.StampCard;
import nts.uk.ctx.at.record.dom.workrecord.actuallock.ActualLock;
import nts.uk.ctx.at.record.dom.workrecord.workperfor.dailymonthlyprocessing.EmpCalAndSumExeLog;
import nts.uk.ctx.at.record.dom.workrecord.workperfor.dailymonthlyprocessing.ExecutionLog;
import nts.uk.ctx.at.shared.dom.adapter.employee.EmployeeImport;
import nts.uk.ctx.at.shared.dom.adapter.workplace.SharedAffWorkPlaceHisImport;
import nts.uk.ctx.at.shared.dom.holidaymanagement.publicholiday.configuration.PublicHolidayManagementUsageUnit;
import nts.uk.ctx.at.shared.dom.holidaymanagement.publicholiday.configuration.PublicHolidaySetting;
import nts.uk.ctx.at.shared.dom.holidaymanagement.publicholiday.employee.carryForwarddata.PublicHolidayCarryForwardData;
import nts.uk.ctx.at.shared.dom.ot.frame.OvertimeWorkFrame;
import nts.uk.ctx.at.shared.dom.remainingnumber.annualleave.empinfo.grantremainingdata.AnnualLeaveGrantRemainingData;
import nts.uk.ctx.at.shared.dom.remainingnumber.annualleave.empinfo.maxdata.AnnualLeaveMaxData;
import nts.uk.ctx.at.shared.dom.remainingnumber.nursingcareleavemanagement.care.CareUsedNumberData;
import nts.uk.ctx.at.shared.dom.remainingnumber.nursingcareleavemanagement.childcare.ChildCareUsedNumberData;
import nts.uk.ctx.at.shared.dom.remainingnumber.nursingcareleavemanagement.info.CareLeaveRemainingInfo;
import nts.uk.ctx.at.shared.dom.remainingnumber.nursingcareleavemanagement.info.ChildCareLeaveRemainingInfo;
import nts.uk.ctx.at.shared.dom.remainingnumber.nursingcareleavemanagement.info.NursingCareLeaveRemainingInfo;
import nts.uk.ctx.at.shared.dom.remainingnumber.reserveleave.empinfo.grantremainingdata.ReserveLeaveGrantRemainingData;
import nts.uk.ctx.at.shared.dom.remainingnumber.specialleave.empinfo.basicinfo.SpecialLeaveBasicInfo;
import nts.uk.ctx.at.shared.dom.remainingnumber.specialleave.empinfo.grantremainingdata.SpecialLeaveGrantRemainingData;
import nts.uk.ctx.at.shared.dom.scherec.addsettingofworktime.HolidayAddtionSet;
import nts.uk.ctx.at.shared.dom.scherec.closurestatus.ClosureStatusManagement;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.affiliationinfor.AffiliationInforOfDailyAttd;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.attendancetime.TemporaryTimeOfDailyAttd;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.attendancetime.TimeLeavingOfDailyAttd;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.dailyattendancework.IntegrationOfDaily;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.entranceandexit.PCLogOnInfoOfDailyAttd;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.erroralarm.EmployeeDailyPerError;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.optionalitemvalue.AnyItemValueOfDailyAttd;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.paytime.SpecificDateAttrOfDailyAttd;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.workinfomation.WorkInfoOfDailyAttendance;
import nts.uk.ctx.at.shared.dom.scherec.dailyattdcal.dailyattendance.worktime.AttendanceTimeOfDailyAttendance;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.flex.com.ComFlexMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.flex.emp.EmpFlexMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.flex.sha.ShaFlexMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.flex.wkp.WkpFlexMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.com.ComDeforLaborMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.com.ComRegulaMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.emp.EmpDeforLaborMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.emp.EmpRegulaMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.sha.ShaDeforLaborMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.sha.ShaRegulaMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.wkp.WkpDeforLaborMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.calcmethod.other.wkp.WkpRegulaMonthActCalSet;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.calcmethod.legaltransferorder.LegalTransferOrderSetOfAggrMonthly;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.roundingset.RoundingSetOfMonthly;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.vtotalmethod.AggregateMethodOfMonthly;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.vtotalmethod.PayItemCountOfMonthly;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.vtotalmethod.WorkDaysNumberOnLeaveCount;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.aggr.work.MonAggrCompanySettings;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.agreement.management.AgreementTimeOfClassification;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.agreement.management.AgreementTimeOfCompany;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.agreement.management.AgreementTimeOfEmployment;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.agreement.management.AgreementTimeOfWorkPlace;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.agreement.management.enums.LaborSystemtAtr;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.agreement.management.setting.AgreementOperationSetting;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.agreement.management.setting.AgreementUnitSetting;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.monthly.flexshortage.FlexShortageLimit;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.monthly.flexshortage.InsufficientFlexHolidayMnt;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.monthly.ouen.aggframe.OuenAggregateFrameSetOfMonthly;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.monthly.workform.flex.MonthlyAggrSetOfFlex;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.outsideot.holiday.SuperHD60HConMed;
import nts.uk.ctx.at.shared.dom.scherec.optitem.OptionalItem;
import nts.uk.ctx.at.shared.dom.scherec.optitem.calculation.Formula;
import nts.uk.ctx.at.shared.dom.scherec.optitem.calculation.disporder.FormulaDispOrder;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.UsageUnitSetting;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.monunit.MonthlyWorkTimeSetCom;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.monunit.MonthlyWorkTimeSetEmp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.monunit.MonthlyWorkTimeSetSha;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.monunit.MonthlyWorkTimeSetWkp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeCom;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeEmp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeSha;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeWkp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeCom;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeEmp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeSha;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeWkp;
import nts.uk.ctx.at.shared.dom.scherec.totaltimes.TotalTimes;
import nts.uk.ctx.at.shared.dom.specialholiday.SpecialHoliday;
import nts.uk.ctx.at.shared.dom.specialholiday.grantinformation.ElapseYear;
import nts.uk.ctx.at.shared.dom.specialholiday.grantinformation.GrantDateTbl;
import nts.uk.ctx.at.shared.dom.vacation.setting.annualpaidleave.AnnualPaidLeaveSetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.annualpaidleave.OperationStartSetDailyPerform;
import nts.uk.ctx.at.shared.dom.vacation.setting.compensatoryleave.CompensatoryLeaveComSetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.nursingleave.NursingCategory;
import nts.uk.ctx.at.shared.dom.vacation.setting.nursingleave.NursingLeaveSetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.retentionyearly.EmptYearlyRetentionSetting;
import nts.uk.ctx.at.shared.dom.workingcondition.WorkingCondition;
import nts.uk.ctx.at.shared.dom.workrule.closure.Closure;
import nts.uk.ctx.at.shared.dom.workrule.closure.ClosureEmployment;
import nts.uk.ctx.at.shared.dom.workrule.weekmanage.WeekRuleManagement;
import nts.uk.ctx.at.shared.dom.worktime.predset.PredetemineTimeSetting;
import nts.uk.ctx.at.shared.dom.worktime.worktimeset.WorkTimeSetting;
import nts.uk.ctx.at.shared.dom.worktype.WorkType;
import nts.uk.ctx.at.shared.dom.yearholidaygrant.GrantHdTblSet;

@Setter
@Getter
public class RecordDomRequireServiceCache {
	Optional<WeekRuleManagement> weekRuleManagementCache = Optional.empty();
	Map<String,Optional<PredetemineTimeSetting>> predetemineTimeSettingMap = new ConcurrentHashMap<String, Optional<PredetemineTimeSetting>>();
	Map<String, Optional<RegularLaborTimeEmp>> regularLaborTimeEmpMap = new ConcurrentHashMap<String, Optional<RegularLaborTimeEmp>>();
	Map<String, Optional<DeforLaborTimeEmp>> deforLaborTimeEmpMap = new ConcurrentHashMap<String, Optional<DeforLaborTimeEmp>>();
	Map<String, Optional<RegularLaborTimeWkp>> regularLaborTimeWkpMap = new ConcurrentHashMap<String, Optional<RegularLaborTimeWkp>>();
	Map<String, Optional<DeforLaborTimeWkp>> deforLaborTimeWkpMap = new ConcurrentHashMap<String, Optional<DeforLaborTimeWkp>>();
	Map<String, Optional<MonthlyWorkTimeSetEmp>> monthlyWorkTimeSetEmpMap = new ConcurrentHashMap<String, Optional<MonthlyWorkTimeSetEmp>>();
	Optional<RegularLaborTimeCom> regularLaborTimeComCache = Optional.empty();
	Optional<DeforLaborTimeCom> deforLaborTimeComCache = Optional.empty();
	Map<String, Optional<MonthlyWorkTimeSetCom>> monthlyWorkTimeSetComMap = new ConcurrentHashMap<String, Optional<MonthlyWorkTimeSetCom>>();
	Map<String, Optional<MonthlyWorkTimeSetWkp>> monthlyWorkTimeSetWkpMap = new ConcurrentHashMap<String, Optional<MonthlyWorkTimeSetWkp>>();
	Map<String, Optional<WkpFlexMonthActCalSet>> wkpFlexMonthActCalSetMap = new ConcurrentHashMap<String, Optional<WkpFlexMonthActCalSet>>();
	Map<String, Optional<EmpFlexMonthActCalSet>> empFlexMonthActCalSetMap = new ConcurrentHashMap<String, Optional<EmpFlexMonthActCalSet>>();
	Map<String, Optional<WkpDeforLaborMonthActCalSet>> wkpDeforLaborMonthActCalSetMap = new ConcurrentHashMap<String, Optional<WkpDeforLaborMonthActCalSet>>();
	Map<String, Optional<EmpDeforLaborMonthActCalSet>> empDeforLaborMonthActCalSetMap = new ConcurrentHashMap<String, Optional<EmpDeforLaborMonthActCalSet>>();
	Map<String, Optional<WkpRegulaMonthActCalSet>> wkpRegulaMonthActCalSetMap = new ConcurrentHashMap<String, Optional<WkpRegulaMonthActCalSet>>();
	Map<String, Optional<EmpRegulaMonthActCalSet>> empRegulaMonthActCalSetMap = new ConcurrentHashMap<String, Optional<EmpRegulaMonthActCalSet>>();
	Optional<UsageUnitSetting> usageUnitSettingCache = Optional.empty();
	Optional<RoundingSetOfMonthly> roundingSetOfMonthlyCache = Optional.empty();
	Optional<AgreementOperationSetting> agreementOperationSettingCache = Optional.empty();
	Map<String, List<ClosureEmployment>> employmentClosureCache = new ConcurrentHashMap<String, List<ClosureEmployment>>();
	Optional<OperationStartSetDailyPerform> operationStartSetDailyPerformCache = Optional.empty();
	Optional<PayItemCountOfMonthly> payItemCountOfMonthlyCache = Optional.empty();
	Optional<LegalTransferOrderSetOfAggrMonthly> legalTransferOrderSetOfAggrMonthlyCache = Optional.empty();
	Optional<MonthlyAggrSetOfFlex> monthlyAggrSetOfFlexCache = Optional.empty();
	Optional<InsufficientFlexHolidayMnt> insufficientFlexHolidayMntCache = Optional.empty();
	Optional<FlexShortageLimit> flexShortageLimitCache = Optional.empty();
	Optional<AgreementUnitSetting> agreementUnitSettingCache = Optional.empty();
	Optional<OuenAggregateFrameSetOfMonthly> ouenAggregateFrameSetOfMonthlyCache = Optional.empty();
	Optional<ComRegulaMonthActCalSet> comRegulaMonthActCalSetCache = Optional.empty();
	Optional<ComDeforLaborMonthActCalSet> comDeforLaborMonthActCalSetCache = Optional.empty();
	Optional<ComFlexMonthActCalSet> comFlexMonthActCalSetCache = Optional.empty();
	Optional<AggregateMethodOfMonthly> aggregateMethodOfMonthlyCache = Optional.empty();
	Optional<SuperHD60HConMed> superHD60HConMedCache = Optional.empty();
	Optional<HolidayAddtionSet> holidayAddtionSetCache = Optional.empty();
	Optional<PublicHolidaySetting> publicHolidaySettingCache = Optional.empty();
	Optional<PublicHolidayManagementUsageUnit> publicHolidayManagementUsageUnitCache =Optional.empty();
	Optional<CreatingDailyResultsCondition> creatingDailyResultsConditionCache = Optional.empty();
	List<GrantHdTblSet> grantHdTblSetCache = new ArrayList<>();
	List<OptionalItem> optionalItemCache = new ArrayList<>();
	List<Formula> formulaCache = new ArrayList<>();
	List<FormulaDispOrder> formulaDispOrderCache = new ArrayList<>();
	List<EmptYearlyRetentionSetting> emptYearlyRetentionSettingCache = new ArrayList<>();
	List<OvertimeWorkFrame> overtimeWorkFrameCache = new ArrayList<>();
	List<TotalTimes> totalTimesCache = new ArrayList<>();
	List<AgreementTimeOfCompany> agreementTimeOfCompanyCache = new ArrayList<>();
	List<SpecialHoliday> specialHolidayCache = new ArrayList<>();
	MonAggrCompanySettings monAggrCompanySettingsCache = null;
	CompensatoryLeaveComSetting compensatoryLeaveComSettingCache = null;
	AnnualPaidLeaveSetting annualPaidLeaveSettingCache = null;
	WorkDaysNumberOnLeaveCount workDaysNumberOnLeaveCountCache = null;
	Map<LaborSystemtAtr, Optional<AgreementTimeOfCompany>>agreementTimeOfCompanyMap = new ConcurrentHashMap<LaborSystemtAtr, Optional<AgreementTimeOfCompany>>();
	Map<Integer, Optional<ActualLock>>actualLockMap = new ConcurrentHashMap<Integer, Optional<ActualLock>>();
	Map<Integer, Optional<SpecialHoliday>> specialHolidayMap = new ConcurrentHashMap<Integer, Optional<SpecialHoliday>>();
	Map<Integer, Optional<ElapseYear>> elapseYearMap = new ConcurrentHashMap<Integer, Optional<ElapseYear>>();
	Map<Integer, List<GrantDateTbl>> grantDateTblMap = new ConcurrentHashMap<Integer, List<GrantDateTbl>>();
	Map<String, Optional<WorkTimeSetting>> workTimeSettingMap = new ConcurrentHashMap<String, Optional<WorkTimeSetting>>();
	Map<NursingCategory, Optional<NursingLeaveSetting>> nursingLeaveSettingMap = new ConcurrentHashMap<>();
	Map<String, Optional<WorkType>> workTypeMap = new ConcurrentHashMap<String, Optional<WorkType>>();
	Map<String, List<EmploymentHistImport>> employmentHistImportMap = new ConcurrentHashMap<String, List<EmploymentHistImport>>(); 
	Map<String, Optional<AgreementTimeOfEmployment>> agreementTimeOfEmploymentMap = new ConcurrentHashMap<String, Optional<AgreementTimeOfEmployment>>();
	Map<String, Optional<ClosureStatusManagement>> closureStatusManagementOptMap = new ConcurrentHashMap<String, Optional<ClosureStatusManagement>>();
	Map<String, Optional<AnnualLeaveMaxData>> annualLeaveMaxDataMap = new ConcurrentHashMap<String, Optional<AnnualLeaveMaxData>>();
	Map<String, List<ReserveLeaveGrantRemainingData>> reserveLeaveGrantRemainingDataMap = new ConcurrentHashMap<String, List<ReserveLeaveGrantRemainingData>>();
	Map<String, List<ReserveLeaveGrantRemainingData>> reserveLeaveGrantRemainingDatabyGrantDateMap = new ConcurrentHashMap<String, List<ReserveLeaveGrantRemainingData>>();
	Map<String, List<SpecialLeaveGrantRemainingData>> specialLeaveGrantRemainingDataMap = new ConcurrentHashMap<String, List<SpecialLeaveGrantRemainingData>>();
	Map<String, List<MonthlyClosureUpdateErrorInfor>> monthlyClosureUpdateErrorInforMap = new ConcurrentHashMap<String, List<MonthlyClosureUpdateErrorInfor>>();
	Map<String, Optional<MonthlyClosureUpdateLog>> monthlyClosureUpdateLogMap = new ConcurrentHashMap<String, Optional<MonthlyClosureUpdateLog>>();
	Map<String, List<MonthlyClosureUpdatePersonLog>> monthlyClosureUpdatePersonLogMap = new ConcurrentHashMap<String, List<MonthlyClosureUpdatePersonLog>>();
	Map<String, Optional<RegularLaborTimeSha>> regularLaborTimeShaMap = new ConcurrentHashMap<String, Optional<RegularLaborTimeSha>>();
	Map<String, Optional<DeforLaborTimeSha>> deforLaborTimeShaMap = new ConcurrentHashMap<String, Optional<DeforLaborTimeSha>>();
	Map<String, Optional<ShaFlexMonthActCalSet>> shaFlexMonthActCalSetMap = new ConcurrentHashMap<String, Optional<ShaFlexMonthActCalSet>>();
	Map<String, Optional<ShaDeforLaborMonthActCalSet>> shaDeforLaborMonthActCalSetMap = new ConcurrentHashMap<String, Optional<ShaDeforLaborMonthActCalSet>>();
	Map<String, Optional<ShaRegulaMonthActCalSet>> shaRegulaMonthActCalSetMap = new ConcurrentHashMap<String, Optional<ShaRegulaMonthActCalSet>>();
	Map<String, Optional<MonthlyWorkTimeSetSha>> monthlyWorkTimeSetShaMap = new ConcurrentHashMap<String, Optional<MonthlyWorkTimeSetSha>>();
	Map<String, List<StampCard>> stampCardMap = new ConcurrentHashMap<String, List<StampCard>>();
	Map<String, Optional<SpecialLeaveBasicInfo>> specialLeaveBasicInfoMap = new ConcurrentHashMap<String, Optional<SpecialLeaveBasicInfo>>();
	Map<String, Optional<GrantDateTbl>> grantDateTblOptMap = new ConcurrentHashMap<String, Optional<GrantDateTbl>>();
	Map<String, List<AnnualLeaveGrantRemainingData>> annualLeaveGrantRemainingDataMap = new ConcurrentHashMap<String, List<AnnualLeaveGrantRemainingData>>();
	Map<String, List<ClosureStatusManagement>> closureStatusManagementMap = new ConcurrentHashMap<String, List<ClosureStatusManagement>>();
	Map<String, Optional<ClosureEmployment>> closureEmploymentMap = new ConcurrentHashMap<String, Optional<ClosureEmployment>>();
	Map<String, Optional<ExecutionLog>> executionLogMap = new ConcurrentHashMap<String, Optional<ExecutionLog>>();
	Map<Integer, Optional<Closure>> closureMap = new ConcurrentHashMap<Integer, Optional<Closure>>();
	Map<String, Optional<PublicHolidayCarryForwardData>> publicHolidayCarryForwardDataMap = new ConcurrentHashMap<String, Optional<PublicHolidayCarryForwardData>>();
	Map<String, Optional<EmployeeImport>> employeeImportMap = new ConcurrentHashMap<>();
	Map<String, Optional<ChildCareUsedNumberData>> childCareUsedNumberDataMap = new ConcurrentHashMap<String, Optional<ChildCareUsedNumberData>>();
	Map<String, Optional<CareUsedNumberData>> careUsedNumberDataMap = new ConcurrentHashMap<String, Optional<CareUsedNumberData>>();
	Map<String, Optional<ChildCareLeaveRemainingInfo>> childCareLeaveRemainingInfoMap = new ConcurrentHashMap<String, Optional<ChildCareLeaveRemainingInfo>>();
	Map<String, Optional<CareLeaveRemainingInfo>> careLeaveRemainingInfo = new ConcurrentHashMap<String, Optional<CareLeaveRemainingInfo>>();
	Map<String, Optional<NursingCareLeaveRemainingInfo>> nursingCareLeaveRemainingInfoMap = new ConcurrentHashMap<String, Optional<NursingCareLeaveRemainingInfo>>();
	Map<String, List<EmploymentHistoryImported>> employmentHistoryImportedMap = new ConcurrentHashMap<String, List<EmploymentHistoryImported>>();
	Map<String, Optional<WorkingCondition>> workingConditionMap = new ConcurrentHashMap<String, Optional<WorkingCondition>>();
	Map<String, Optional<EmpCalAndSumExeLog>> empCalAndSumExeLogMap = new ConcurrentHashMap<String, Optional<EmpCalAndSumExeLog>>();
	Map<String, Optional<AgreementTimeOfClassification>> agreementTimeOfClassificationMap = new ConcurrentHashMap<String, Optional<AgreementTimeOfClassification>>();
	Map<String, Optional<AgreementTimeOfWorkPlace>> agreementTimeOfWorkPlaceMap = new ConcurrentHashMap<String, Optional<AgreementTimeOfWorkPlace>>();
	Map<String, WorkInfoOfDailyAttendance> workInfoOfDailyAttendanceMap = new ConcurrentHashMap<String, WorkInfoOfDailyAttendance>();
	Map<String, TimeLeavingOfDailyAttd> timeLeavingOfDailyAttdMap = new ConcurrentHashMap<String, TimeLeavingOfDailyAttd>();
	Map<String, TemporaryTimeOfDailyAttd> temporaryTimeOfDailyAttdMap = new ConcurrentHashMap<String, TemporaryTimeOfDailyAttd>();
	Map<String, SpecificDateAttrOfDailyAttd> specificDateAttrOfDailyAttdMap = new ConcurrentHashMap<String, SpecificDateAttrOfDailyAttd>();
	Map<String, EmployeeDailyPerError> employeeDailyPerErrorMap = new ConcurrentHashMap<String, EmployeeDailyPerError>();
	Map<String, AnyItemValueOfDailyAttd> anyItemValueOfDailyAttdMap = new ConcurrentHashMap<String, AnyItemValueOfDailyAttd>();
	Map<Pair<String,DatePeriod>, SharedAffWorkPlaceHisImport> sharedAffWorkPlaceHisImportMapMap = new ConcurrentHashMap<Pair<String,DatePeriod>, SharedAffWorkPlaceHisImport>(); 
	Map<String, PCLogOnInfoOfDailyAttd> pCLogOnInfoOfDailyAttdMap = new ConcurrentHashMap<String, PCLogOnInfoOfDailyAttd>();
	Map<String, AttendanceTimeOfDailyAttendance> attendanceTimeOfDailyAttendanceMap = new ConcurrentHashMap<String, AttendanceTimeOfDailyAttendance>();
	Map<String, AffiliationInforOfDailyAttd> affiliationInforOfDailyAttdMap = new ConcurrentHashMap<String, AffiliationInforOfDailyAttd>();
	Map<String, IntegrationOfDaily> integrationOfDailyMap = new ConcurrentHashMap<String, IntegrationOfDaily>();
	Map<String, IntegrationOfDaily> integrationOfDailySIDListMap = new ConcurrentHashMap<String, IntegrationOfDaily>();
	Map<String, AttendanceTimeOfDailyAttendance> attendanceTimeOfDailyAttendanceListMap = new ConcurrentHashMap<String, AttendanceTimeOfDailyAttendance>();
	
	
	
}
