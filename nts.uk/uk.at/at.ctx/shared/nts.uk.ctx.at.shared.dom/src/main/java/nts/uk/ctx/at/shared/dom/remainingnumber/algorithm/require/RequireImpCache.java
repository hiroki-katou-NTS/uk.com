package nts.uk.ctx.at.shared.dom.remainingnumber.algorithm.require;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

import lombok.Getter;
import lombok.Setter;
import nts.uk.ctx.at.shared.dom.adapter.employment.EmploymentHistShareImport;
import nts.uk.ctx.at.shared.dom.adapter.holidaymanagement.CompanyDto;
import nts.uk.ctx.at.shared.dom.remainingnumber.absencerecruitment.interim.InterimRecAbsMng;
import nts.uk.ctx.at.shared.dom.remainingnumber.algorithm.CheckCareResult;
import nts.uk.ctx.at.shared.dom.remainingnumber.annualleave.empinfo.basicinfo.AnnualLeaveEmpBasicInfo;
import nts.uk.ctx.at.shared.dom.remainingnumber.breakdayoffmng.interim.InterimBreakDayOffMng;
import nts.uk.ctx.at.shared.dom.remainingnumber.paymana.PayoutManagementData;
import nts.uk.ctx.at.shared.dom.remainingnumber.paymana.SubstitutionOfHDManagementData;
import nts.uk.ctx.at.shared.dom.remainingnumber.subhdmana.CompensatoryDayOffManaData;
import nts.uk.ctx.at.shared.dom.remainingnumber.subhdmana.LeaveManagementData;
import nts.uk.ctx.at.shared.dom.scherec.monthlyattdcal.outsideot.OutsideOTSetting;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.UsageUnitSetting;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeCom;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeEmp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeSha;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.defor.DeforLaborTimeWkp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeCom;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeEmp;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeSha;
import nts.uk.ctx.at.shared.dom.scherec.statutory.worktime.week.regular.RegularLaborTimeWkp;
import nts.uk.ctx.at.shared.dom.vacation.setting.annualpaidleave.AnnualPaidLeaveSetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.compensatoryleave.CompensatoryLeaveComSetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.compensatoryleave.CompensatoryLeaveEmSetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.retentionyearly.EmptYearlyRetentionSetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.retentionyearly.RetentionYearlySetting;
import nts.uk.ctx.at.shared.dom.vacation.setting.subst.ComSubstVacation;
import nts.uk.ctx.at.shared.dom.vacation.setting.subst.EmpSubstVacation;
import nts.uk.ctx.at.shared.dom.workdayoff.frame.WorkdayoffFrame;
import nts.uk.ctx.at.shared.dom.workingcondition.WorkingConditionItem;
import nts.uk.ctx.at.shared.dom.workrule.closure.Closure;
import nts.uk.ctx.at.shared.dom.workrule.closure.ClosureEmployment;
import nts.uk.ctx.at.shared.dom.workrule.closure.UseClassification;
import nts.uk.ctx.at.shared.dom.worktime.common.WorkTimeCode;
import nts.uk.ctx.at.shared.dom.worktime.difftimeset.DiffTimeWorkSetting;
import nts.uk.ctx.at.shared.dom.worktime.fixedset.FixedWorkSetting;
import nts.uk.ctx.at.shared.dom.worktime.flexset.FlexWorkSetting;
import nts.uk.ctx.at.shared.dom.worktime.flowset.FlowWorkSetting;
import nts.uk.ctx.at.shared.dom.worktime.predset.PredetemineTimeSetting;
import nts.uk.ctx.at.shared.dom.worktime.worktimeset.WorkTimeSetting;
import nts.uk.ctx.at.shared.dom.worktype.WorkType;
import nts.uk.ctx.at.shared.dom.worktype.WorkTypeSet;
import nts.uk.ctx.at.shared.dom.yearholidaygrant.GrantHdTbl;
import nts.uk.ctx.at.shared.dom.yearholidaygrant.GrantHdTblSet;
import nts.uk.ctx.at.shared.dom.yearholidaygrant.LengthServiceTbl;

@Getter
@Setter
public class RequireImpCache {
	Optional<OutsideOTSetting> outsideOTSettingCache = Optional.empty();
	Map<String, Optional<FlowWorkSetting>>  flowWorkSetMap = new ConcurrentHashMap<String, Optional<FlowWorkSetting>>();
	Map<String, Optional<FlexWorkSetting>>  flexWorkSetMap = new ConcurrentHashMap<String, Optional<FlexWorkSetting>>();
	Map<String, Optional<FixedWorkSetting>>  fixedWorkSetMap = new ConcurrentHashMap<String, Optional<FixedWorkSetting>>();
	Map<String, Optional<WorkTimeSetting>>  workTimeSetMap = new ConcurrentHashMap<String, Optional<WorkTimeSetting>>();
	Map<String, Optional<WorkType>>  workTypeMap = new ConcurrentHashMap<String, Optional<WorkType>>();
	Map<Integer, Optional<Closure>> closureMap = new ConcurrentHashMap<Integer, Optional<Closure>>();
	Optional<ComSubstVacation> comSubstVacationCache = Optional.empty();
	Optional<RetentionYearlySetting> retentionYearlySettingCache = Optional.empty();
	Optional<UsageUnitSetting> usageUnitSettingCache = Optional.empty();
	Optional<RegularLaborTimeCom> regularLaborTimeComCache = Optional.empty();
	Optional<DeforLaborTimeCom> deforLaborTimeComCache = Optional.empty();
	CompensatoryLeaveComSetting compensatoryLeaveComSettingCache = null;
	List<Closure> closureCache = new ArrayList<>();
	List<WorkdayoffFrame> workdayoffFrameCache = new ArrayList<>();
	AnnualPaidLeaveSetting annualPaidLeaveSettingCache = null;
	CompanyDto companyDtoCache = null;
	Map<String, Optional<DiffTimeWorkSetting>> diffTimeWorkSettingMap = new ConcurrentHashMap<String, Optional<DiffTimeWorkSetting>>();
	Map<String, Optional<PredetemineTimeSetting>> predetemineTimeSetting = new ConcurrentHashMap<String, Optional<PredetemineTimeSetting>>();
	Map<Integer, List<Integer>> specialHolidayCodeBySpecLeaveNoMap = new ConcurrentHashMap<Integer, List<Integer>>();
	Map<Integer, List<Integer>> specialHolidayCodeByAbsenseNoMap = new ConcurrentHashMap<Integer, List<Integer>>();
	Map<String, Optional<ClosureEmployment>> closureEmploymentMap = new ConcurrentHashMap<String, Optional<ClosureEmployment>>();
	Map<String, Optional<EmpSubstVacation>> empSubstVacationMap = new ConcurrentHashMap<String, Optional<EmpSubstVacation>>();
	Map<String, Optional<CompensatoryLeaveEmSetting>> compensatoryLeaveEmSettingMap = new ConcurrentHashMap<>();
	Map<UseClassification, List<Closure>> closurebyUseClassificationMap = new ConcurrentHashMap<UseClassification, List<Closure>>();	
	Map<String, Optional<EmptYearlyRetentionSetting>> emptYearlyRetentionSettingMap = new ConcurrentHashMap<String, Optional<EmptYearlyRetentionSetting>>();
	Map<String, Optional<RegularLaborTimeWkp>> regularLaborTimeWkpMap = new ConcurrentHashMap<String, Optional<RegularLaborTimeWkp>>();
	Map<String, Optional<DeforLaborTimeWkp>> deforLaborTimeWkpMap = new ConcurrentHashMap<String, Optional<DeforLaborTimeWkp>>();
	Map<String, Optional<RegularLaborTimeEmp>> regularLaborTimeEmpMap = new ConcurrentHashMap<String, Optional<RegularLaborTimeEmp>>();
	Map<String, Optional<DeforLaborTimeEmp>> deforLaborTimeEmpMap = new ConcurrentHashMap<String, Optional<DeforLaborTimeEmp>>();
	Map<String, Optional<RegularLaborTimeSha>> regularLaborTimeShaMap = new ConcurrentHashMap<String, Optional<RegularLaborTimeSha>>();
	Map<String, Optional<DeforLaborTimeSha>> deforLaborTimeShaMap = new ConcurrentHashMap<String, Optional<DeforLaborTimeSha>>();
	Map<WorkTypeSet, Optional<CheckCareResult>> checkCareResultMap = new ConcurrentHashMap<>();
	Map<String, Optional<GrantHdTblSet>> grantHdTblSetMap = new ConcurrentHashMap<String, Optional<GrantHdTblSet>>();
	Map<String, List<LengthServiceTbl>> lengthServiceTblMap = new ConcurrentHashMap<String, List<LengthServiceTbl>>();
	Map<String, Optional<WorkingConditionItem>> workingConditionItemMap = new ConcurrentHashMap<String, Optional<WorkingConditionItem>>();
	Map<String, Optional<AnnualLeaveEmpBasicInfo>> annualLeaveEmpBasicInfoMap = new ConcurrentHashMap<String, Optional<AnnualLeaveEmpBasicInfo>>();
	Map<String, Optional<GrantHdTbl>> grantHdTblMap = new ConcurrentHashMap<String, Optional<GrantHdTbl>>();
	Map<String, List<SubstitutionOfHDManagementData>> substitutionOfHDManagementDataMap = new ConcurrentHashMap<String, List<SubstitutionOfHDManagementData>>();
	Map<String, List<PayoutManagementData>> payoutManagementDataMap = new ConcurrentHashMap<String, List<PayoutManagementData>>();
	Map<String, List<EmploymentHistShareImport>> employmentHistShareImportMap = new ConcurrentHashMap<String, List<EmploymentHistShareImport>>();
	Map<String, List<CompensatoryDayOffManaData>> compensatoryDayOffManaDataMap = new ConcurrentHashMap<String, List<CompensatoryDayOffManaData>>();
	Map<String, List<LeaveManagementData>> leaveManagementDataMap = new ConcurrentHashMap<String, List<LeaveManagementData>>();
	Map<WorkTimeCode, Optional<FixedWorkSetting>> fixedWorkSettingMap = new ConcurrentHashMap<>();
	Map<WorkTimeCode, Optional<FlowWorkSetting>> flowWorkSettingMap = new ConcurrentHashMap<>();
	Map<WorkTimeCode, Optional<FlexWorkSetting>> flexWorkSettingMap = new ConcurrentHashMap<>();
	
}
